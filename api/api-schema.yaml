openapi: '3.0.3'

info:
  title: CityBus API
  version: '1.0'

servers:
  - url: 127.0.0.1:3001

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    400BadRequest:
      description: Request not valid
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/MessageResponse"
    401Unauthorized:
      description: Client not authenticated
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/MessageResponse"
    403Forbidden:
      description: Client not allowed to access resource
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/MessageResponse"
    404NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/MessageResponse"
    500InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/MessageResponse"
  schemas:
    MessageResponse:
      type: object
      properties:
        message:
          type: string
      required:
        - message
    Time:
      type: object
      properties:
        hour:
          type: integer
          minimum: 0
          maximum: 23
        minute:
          type: integer
          minimum: 0
          maximum: 59
    User:
      type: object
      properties:
        name:
          type: object
          properties:
            firstName:
              type: string
            lastName:
              type: string
        email:
          type: string
        role:
          type: string
    GeoJSONPoint:
      type: object
      properties:
        type:
          type: string
          enum:
            - Point
        coordinates:
          type: array
          items:
            type: number
          minLength: 2
          maxLength: 2
          example: [30.140484, -9.156697]
    GeoJSONLineString:
      type: object
      properties:
        type:
          type: string
          enum:
            - LineString
        coordinates:
          type: array
          example: [30.140484, -9.156697]
          items:
            type: array
            minLength: 2
            maxLength: 2
            items:
              type: number
    RouteStep:
      type: object
      properties:
        duration:
          type: number
        geometry:
          type: array
          items:
            $ref: "#/components/schemas/GeoJSONLineString"
    RouteLeg:
      type: object
      properties:
        duration:
          type: number
        steps:
          type: array
          items:
            $ref: "#/components/schemas/RouteStep"
    LineDirection:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        direction:
          type: object
          properties:
            id:
              type: string
            name:
              type: string
    NavigationFootLeg:
      type: object
      properties:
        type:
          type: string
          enum:
            - foor
        duration:
          type: number
        departureTimestamp:
          type: number
        arrivalTimestamp:
          type: number
        steps:
          type: array
          items:
            $ref: "#/components/schemas/GeoJSONLineString"
    NavigationBusLeg:
      type: object
      properties:
        type:
          type: string
          enum:
            - "bus"
        duration:
          type: number
        departureTimestamp:
          type: number
        arrivalTimestamp:
          type: number
        line:
          $ref: "#/components/schemas/LineDirection"
        stops:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              location:
                $ref: "#/components/schemas/GeoJSONPoint"
              timeToNext:
                type: number
              routeToNext:
                type: array
                items:
                  $ref: "#/components/schemas/GeoJSONLineString"
    CompleteBusLine:
      type: object
      properties:
        name:
          type: string
        directions:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              stops:
                type: array
                items:
                  oneOf:
                    - type: string
                    - type: object
                      properties:
                        name:
                          type: string
                        location:
                          $ref: "#/components/schemas/GeoJSONPoint"
              routeLegs:
                type: array
                items:
                  $ref: "#/components/schemas/RouteLeg"
              timetable:
                type: array
                items:
                  type: array
                  items:
                    $ref: "#/components/schemas/Time"


tags:
  - name: authentication
    description: Users' authentication
  - name: users
    description: Users management
  - name: routes
    description: Routing engine interface
  - name: busline
    description: Bus lines, directions and stops
  - name: busstop
    description: Bus stops
  - name: busride
    description: Bus rides

paths:
  /auth/session:
    post:
      summary: Authenticate user and create new session
      tags:
        - authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required:
                - email
                - password
      responses:
        '201':
          description: JSON containing user's informations, JWT and renew token
          content:
            application/json:
              schema:
                type: object
                properties:
                  jwt:
                    type: string
                  renewToken:
                    type: string
                required:
                  - jwt
                  - renewToken
        '400':
          $ref: "#/components/responses/400BadRequest"
        '401':
          $ref: "#/components/responses/401Unauthorized"
        '500':
          $ref: "#/components/responses/500InternalServerError"
    put:
      summary: Renew current session and receive new tokens
      tags:
        - authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                renewToken:
                  type: string
              required:
                - renewToken
      responses:
        '200':
          description: JSON containing new JWT and renew token
          content:
            application/json:
              schema:
                type: object
                properties:
                  jwt:
                    type: string
                  renewToken:
                    type: string
                required:
                  - jwt
                  - renewToken
        '401':
          $ref: "#/components/responses/401Unauthorized"
        '500':
          $ref: "#/components/responses/500InternalServerError"
    delete:
      summary: Delete current user's session (equivalent to logout)
      tags:
        - authentication
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Session deleted
        '401':
          $ref: "#/components/responses/401Unauthorized"
        '500':
          $ref: "#/components/responses/500InternalServerError"

  /users/me:
    get:
      summary: Get logged user's informations
      tags:
        - users
      security:
        - BearerAuth: []
      responses:
        '200':
          description: JSON containing user informations
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        '401':
          $ref: "#/components/responses/401Unauthorized"
        '500':
          $ref: "#/components/responses/500InternalServerError"
    put:
      summary: Update user's informations
      tags:
        - users
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
              required:
                - firstName
                - lastName
      responses:
        '200':
          description: User updated
        '400':
          $ref: "#/components/responses/400BadRequest"
        '401':
          $ref: "#/components/responses/401Unauthorized"
        '500':
          $ref: "#/components/responses/500InternalServerError"
  /users/me/password:
    put:
      summary: Update user's password
      tags:
        - users
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                oldPassword:
                  type: string
                newPassword:
                  type: string
      responses:
        "200":
          description: Password changed successfully
        '400':
          $ref: "#/components/responses/400BadRequest"
        '401':
          $ref: "#/components/responses/401Unauthorized"
        "403":
          description: Old password does not match
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
        '500':
          $ref: "#/components/responses/500InternalServerError"
  /users/registration:
    post:
      summary: Register new user
      tags:
        - users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                password:
                  type: string
      responses:
        '201':
          description: "User created successfully"
        '400':
          $ref: "#/components/responses/400BadRequest"
        '500':
          $ref: "#/components/responses/500InternalServerError"


  /routes/busline:
    get:
      summary: Generate route for a new bus line using specified coordinates as stops
      tags:
        - routes
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: stops
          schema:
            type: string
          description: List of stops coordinates in format longitude,latitude separated by ;
          required: true
      responses:
        '200':
          description: Return an array where each element is the route between one stop and the next one; array elements order is based on stops order in request
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RouteLeg"
        '400':
          $ref: "#/components/responses/400BadRequest"
        '401':
          $ref: "#/components/responses/401Unauthorized"
        '403':
          $ref: "#/components/responses/403Forbidden"
        '500':
          $ref: "#/components/responses/500InternalServerError"
  /routes/navigation:
    get:
      summary: Generate navigation route between two points combining walking paths and bus lines
      tags:
        - routes
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: departure_timestamp
          schema:
            type: number
          description: The departure timestamp
          required: true
      responses:
        '200':
            description: "TODO: write description"
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    totalDuration:
                      type: number
                    departureTimestamp:
                      type: number
                    arrivalTimestamp:
                      type: number
                    legs:
                      type: array
                      items:
                        oneOf:
                          - $ref: "#/components/schemas/NavigationFootLeg"
                          - $ref: "#/components/schemas/NavigationBusLeg"
        '400':
          $ref: "#/components/responses/400BadRequest"
        '401':
          $ref: "#/components/responses/401Unauthorized"
        '403':
          $ref: "#/components/responses/403Forbidden"
        '500':
          $ref: "#/components/responses/500InternalServerError"

  /lines:
    get:
      summary: Retrieve list of bus lines
      tags:
        - busline
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: search
          schema:
            type: string
          description: Optional search query to filter lines
          required: false
      responses:
        '200':
          description: "List of bus lines"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    name:
                      type: string
        '401':
          $ref: "#/components/responses/401Unauthorized"
        '500':
          $ref: "#/components/responses/500InternalServerError"
    post:
      summary: Create new bus line
      tags:
        - busline
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CompleteBusLine"
      responses:
        '201':
          description: "Resource created successfully"
        '400':
          $ref: "#/components/responses/400BadRequest"
        '401':
          $ref: "#/components/responses/401Unauthorized"
        '403':
          $ref: "#/components/responses/403Forbidden"
        '500':
          $ref: "#/components/responses/500InternalServerError"
  /lines/detailed:
    get:
      description: retrieve detailed informations about all lines
      tags:
        - busline
      security:
        - BearerAuth: []
      parameters: []
      responses:
        '200':
          description: "List of bus lines detailed informations"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    line_id:
                      type: string
                    line_name:
                      type: string
                    direction_id:
                      type: string
                    direction_name:
                      type: string
                    stops:
                      type: array
                      items:
                        type: object
                        properties:
                          stop_id:
                            type: string
                          stop_name:
                            type: string
        '401':
          $ref: "#/components/responses/401Unauthorized"
        '500':
          $ref: "#/components/responses/500InternalServerError"
  /lines/{busLineId}:
    put:
      summary: Update existing bus line
      tags:
        - busline
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: busLineId
          schema:
            type: string
          required: true
          description: Id of the bus line
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CompleteBusLine"
      responses:
        '200':
          description: "Resource updated successfully"
        '400':
          $ref: "#/components/responses/400BadRequest"
        '401':
          $ref: "#/components/responses/401Unauthorized"
        '403':
          $ref: "#/components/responses/403Forbidden"
        '404':
          $ref: "#/components/responses/404NotFound"
        '500':
          $ref: "#/components/responses/500InternalServerError"
    delete:
      summary: Delete bus line
      tags:
        - busline
      security:
        - BearerAuth: []
      responses:
        '200':
          description: "Resource deleted successfully"
        '401':
          $ref: "#/components/responses/401Unauthorized"
        '403':
          $ref: "#/components/responses/403Forbidden"
        '404':
          $ref: "#/components/responses/404NotFound"
        '500':
          $ref: "#/components/responses/500InternalServerError"
  /lines/{busLineId}/complete:
    get:
      summary: Retrieve all informations about specified bus line
      tags:
        - busline
      security:
        - BearerAuth: []
      responses:
        '200':
          description: "Complete bus line informations"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CompleteBusLine"
        '401':
          $ref: "#/components/responses/401Unauthorized"
        '403':
          $ref: "#/components/responses/403Forbidden"
        '404':
          $ref: "#/components/responses/404NotFound"
        '500':
          $ref: "#/components/responses/500InternalServerError"

  /stops:
    get:
      summary: Retrieve list of bus stops
      tags:
        - busstop
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: near
          schema:
            type: string
          required: false
          description: Location to seach near (in format <logitude>,<latitude>)
        - in: query
          name: search
          schema:
            type: string
          required: false
          description: Search string to filter stops
      responses:
        '200':
          description: List of bus stops
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    stopId:
                      type: string
                    name:
                      type: string
                    location:
                      $ref: "#/components/schemas/GeoJSONPoint"
                    
        '400':
          $ref: "#/components/responses/400BadRequest"
        '401':
          $ref: "#/components/responses/401Unauthorized"
        '500':
          $ref: "#/components/responses/500InternalServerError"
  /stops/{busStopId}:
    get:
      summary: Retrieve informations about specified bus stop
      tags:
        - busstop
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: busStopId
          schema:
            type: string
          required: true
          description: Id of the bus stop
      responses:
        '200':
          description: Bus stop informtions
          content:
            application/json:
              schema:
                type: object
                properties:
                  busStopId:
                    type: string
                  busStopName:
                    type: string
                  lines:
                    type: array
                    items:
                      type: object
                      properties:
                        lineId:
                          type: string
                        lineName:
                          type: string
                        directions:
                          type: array
                          items:
                            type: object
                            properties:
                              id:
                                type: string
                              name:
                                type: string
        '401':
          $ref: "#/components/responses/401Unauthorized"
        '404':
          $ref: "#/components/responses/404NotFound"
        '500':
          $ref: "#/components/responses/500InternalServerError"
  /stops/{busStopId}/departures:
    get:
      summary: List rides departing from specified bus stop
      tags:
        - busstop
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: busStopId
          schema:
            type: string
          required: true
          description: Id of the bus stop
        - in: query
          name: departure_timestamp
          schema:
            type: number
          required: true
          description: Departure timestamp
      responses:
        '200':
          description: List of busses departing from specified stop at specified time 
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    line:
                      $ref: "#/components/schemas/LineDirection"
                    rideId:
                      type: string
                    scheduledArrivalTimestamp:
                      type: number
                    delay:
                      type: number

  /rides:
    get:
      summary: Rietrieve list of active bus rides
      tags:
        - busride
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: line
          schema:
            type: string
          required: false
          description: Line id; used to filter results
        - in: query
          name: direction
          schema:
            type: string
          required: false
          description: Direction id; used to filter results
      responses:
        '200':
          description: List of bus rides
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    scheduledDepartureTimestamp:
                      type: number
                    line:
                      type: object
                      properties:
                        id:
                          type: string
                        name:
                          type: string
        '401':
          $ref: "#/components/responses/401Unauthorized"
        '500':
          $ref: "#/components/responses/500InternalServerError"
    post:
      summary: Create new bus ride
      tags:
        - busride
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                directionId:
                  type: string
                departureTime:
                  $ref: "#/components/schemas/Time"
      responses:
        '200':
          description: Bus ride created
          content:
            application/json:
              schema:
                type: object
                properties:
                  rideId:
                    type: string
        '400':
          $ref: "#/components/responses/400BadRequest"
        '401':
          $ref: "#/components/responses/401Unauthorized"
        '403':
          $ref: "#/components/responses/403Forbidden"
        '500':
          $ref: "#/components/responses/500InternalServerError"
  /rides/{busRideId}:
    get:
      summary: Retrieve informations about specified bus ride
      tags:
        - busride
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: busRideId
          schema:
            type: string
          required: true
          description: Id of bus ride
      responses:
        '200':
          description: Bus ride informations
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  minutesLate:
                    type: number
                  line:
                    $ref: "#/components/schemas/LineDirection"
                  stops:
                    type: array
                    items:
                      type: object
                      properties:
                        stopId:
                          type: string
                        name:
                          type: string
                        expectedArrivalTimestamp:
                          type: number
                        isBusPassed:
                          type: boolean
        '401':
          $ref: "#/components/responses/401Unauthorized"
        '500':
          $ref: "#/components/responses/500InternalServerError"
